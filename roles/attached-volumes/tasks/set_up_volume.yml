---
- block:
  - name: "Detect attached volume"
    parted:
      device: "{{ attached_volume.device }}"
      unit: GiB
    register: volume_info

  - name: "Set fact for number of existing partitions"
    set_fact:
      num_parts: "{{ volume_info.partitions | length }}"

  - name: "If volume {{ volume_info.disk.dev }} is partitioned - output number of existing partitions"
    debug:
      msg: "Disk {{ volume_info.disk.dev }} has {{ num_parts }} existing partitions!"
    when: num_parts|int > 0

  - name: "If no partitions exist on {{ volume_info.disk.dev }} - create partition on attached volume"
    parted:
      device: "{{ attached_volume.device }}"
      number: "{{ attached_volume.partition }}"
      label: "{{ attached_volume.label|d('gpt') }}"
      state: present
    when: num_parts == "0"

  - name: "Update information on attached volume"
    parted:
      device: "{{ attached_volume.device }}"
      unit: GiB
    register: volume_info2

  - name: "Set fact for updated number of partitions"
    set_fact:
      num_parts2: "{{ volume_info2.partitions | length }}"

  # block used to simplify testing - if partitioning fails in production playbook should abort
  - name: "if {{ volume_info.disk.dev }} is successfully partitioned - proceed with filesystem check/format and mount"
    block:

    - name: "Set fact for partition names on nvme devices"
      set_fact:
        nvme_prefix: 'p'
      when: volume_info2.disk.dev is search("nvme")

    - name: "Set device name including nvme prefix if required"
      set_fact:
        device_part_name: "{{ volume_info.disk.dev }}{{ nvme_prefix | default('') }}{{ attached_volume.partition|d('') }}"

    - name: "device and partition name defined as '{{ device_part_name }}'"
      debug:
        msg: "full device and partition name: '{{ device_part_name }}'"

    - name: "Check partition {{ attached_volume.partition }} on disk {{ attached_volume.device }}"
      set_fact:
        # note ansible list is indexed starting from 0, so need to subtract 1
        part_info: "{{ volume_info2.partitions[attached_volume.partition|int-1] }}"

    - name: "if {{ device_part_name }} is formatted - output fstype"
      debug:
        msg: "{{ device_part_name }} has filesystem type {{ part_info.fstype }}"
      when: part_info.fstype != ""

    - name: "If partition {{ device_part_name }} is unformatted - create a {{ attached_volume.fstype }} filesystem"
      filesystem:
        fstype: "{{ attached_volume.fstype }}"
        dev: "{{ device_part_name }}"
      when: part_info.fstype == ""
    when: num_parts2|int > 0 and attached_volume.partition is defined

  - name: "Mount {{ device_part_name }} on {{ attached_volume.path }} "
    mount:
      path: "{{ attached_volume.path }}"
      src: "{{ device_part_name }}"
      fstype: "{{ attached_volume.fstype }}"
      opts: "{{ attached_volume.opts|d('defaults') }}"
      state: mounted    
  when: attached_volume.device is defined and attached_volume.fstype is defined and attached_volume.path is defined
  become: yes
  become_user: root

